<!--
File: u-toggle.sfc

Implementation of a web component to toggle a classname on an element and/or emit on/off events.

-->


<template light>
  <input class="switch" type="range" min="0" max="1" step="1" value="0" />
</template>


<script>
  export default class MyToggle extends UComponent {
    static observedAttributes = ["toggletarget", "toggleclass", "value"];

    _inputObj = this.querySelector('input[type=range]');
    _targetObj = undefined;
    _toggleClass = undefined;

    /// @brief when clicked toggle the 0/1 value.
    onclick(evt) {
      console.debug('on-click', evt);
      this.value = String(1 - Number(this._inputObj.value));
    } // onclick()


    /// @brief get the value of the component from the embedded input element. 
    getAttribute(name) {
      if (name === 'value') {
        return this._inputObj.value;
      } else {
        return super.getAttribute(name);
      }
    }


    attributeChangedCallback(name, oldValue, newValue) {
      console.debug("attributeChanged", name, oldValue, newValue);

      if (oldValue !== newValue) {
        if (name === "toggletarget") {
          this.toggletarget = newValue;
          if ((newValue === "") || (!newValue)) {
            this._targetObj = undefined;
          } else {
            this._targetObj = document.querySelector(newValue);
          }

        } else if (name === "toggleclass") {
          this.toggleClass = newValue;

        } else if (name === "value") {
          this._inputObj.value = newValue;

          // toggle the class on the target element
          if ((this._targetObj) && this.toggleClass) {
            if (this.value === "1") {
              this._targetObj.classList.add(this.toggleClass);
            } else {
              this._targetObj.classList.remove(this.toggleClass);
            }
          }

          this.dispatchEvent(new Event('change'))
        }
      }

    } // attributeChangedCallback()
  }
</script>