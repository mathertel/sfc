<!--

Implementation of a web component to ...

<dialog is="" ... >

Description...

-->

<script extends="dialog">

  export default class UFormDialog extends HTMLDialogElement {
    _defaultData = undefined;
    _data = undefined;
    _form = undefined;
    _callback = undefined;

    // promise handling for modal dialog
    _promise; _resolve; _reject;

    #firstInit = true;

    // @brief UFormDialog class is attached to a <form> element 
    connectedCallback() {
      console.debug('u-form-dialog', 'connected()');

      this._form = this.querySelector('form');
      this.addEventListener('click', this._onclick);
      this.addEventListener('submit', this._onsubmit);
      this.addEventListener('cancel', this._oncancel);
      this.addEventListener('close', this._oncancel);

      if (document.readyState === 'loading') {
        window.addEventListener('DOMContentLoaded', this.init.bind(this));
      } else {
        // init() the component before next redraw
        window.requestAnimationFrame(this.init.bind(this));
      }
    } // connectedCallback()


    // @brief initialize the dialog with data
    _init(data) {
      console.debug('u-form-dialog', '_init()');

      if ((this._form) && (!this._defaultData)) {
        this._defaultData = this._form.getJsonData();
      }

      this._data = Object.assign({}, this._defaultData, data);

      // populate placeholders (not form elements) with current data 
      this.querySelectorAll('*[u-text]').forEach((e) => {
        const key = e.getAttribute('u-text');
        if (key) { e.textContent = data[key]; }
      });

      if (this._form) {
        (this._form).setJsonData(data);
      }

      const details = {
        dialog: this,
        action: 'init',
        firstInit: this.#firstInit,
        data: this._data,
        form: this._form
      };
      this.#firstInit = false;

      // dispatch init event to extend dialog implementation
      // can dynamically add elements to the form
      this.dispatchEvent(new CustomEvent('init', { detail: details, bubbles: true, cancelable: true, composed: false }));
    } // _init()


    // @brief show the dialog in modal mode
    // @param {Object} data - initial data to populate the form
    // This is an overwrite of the dialog.showModal() method.
    showModal(data = {}) {
      console.debug('u-form-dialog', 'showModal()');
      this._init(data);

      // open Dialog in modal mode
      super.showModal();

      // do not yet rely on `{ dPromise, dResolve, dReject } = Promise.withResolvers();` from ES2025
      this._promise = new Promise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
      return this._promise;
    } // showModal(data)


    // @brief show the dialog in non-modal mode
    // @param {Object} data - initial data to populate the form
    // This is an overwrite of the dialog.show() method.
    show(data = {}) {
      console.debug('u-form-dialog', 'open()');
      this._init(data);

      debugger; // untested

      // open Dialog in non-modal mode
      super.show();

    } // open()


    #dispatchAction(action) {
      console.debug('u-form-dialog', '#dispatchaction()');

      // dispatch action event to extend dialog implementation
      this.dispatchEvent(new CustomEvent('action', {
        detail: {
          dialog: this,
          action: action,
          data: this._data,
          form: this._form
        },
        bubbles: true,
        cancelable: true,
        composed: false,
      }));
    } // #dispatchAction()


    init() {
      console.debug('u-form-dialog', 'init()');
    } // init()


    // handle click event...
    _onclick(evt) {
      let tar = evt.target
      console.debug('u-form-dialog', 'on-click', tar);

      // ony intersted in elements with u-action attribute
      while ((tar && tar !== this) && (!tar.hasAttribute('u-action'))) {
        tar = tar.parentElement;
      }

      const ua = tar.getAttribute('u-action');
      if (ua === 'cancel') {
        super.close(); // no action, just close

      } else if (ua) {
        this._data = this._form.getJsonData();
        this.#dispatchAction(ua);
      }
    } // _onclick()


    // handle submit event - resolve the Promise with data
    _onsubmit(evt) {
      console.debug('u-form-dialog', 'on-submit');
      if (this._promise) this._resolve(this._form.getJsonData());
      this._promise = this._resolve = this._reject = undefined;
    } // _onsubmit()

    // handle close or cancel event - reject the Promise if not yet done.
    _oncancel(evt) {
      console.debug('u-form-dialog', 'on-cancel');
      if (this._promise) this._reject('canceled');
      this._promise = this._resolve = this._reject = undefined;
    } // _oncancel()


    // handle close event - cleanup
    _onclose(evt) {
      console.debug('u-form-dialog', 'on-close');
      if (this._promise) { this._reject('closed'); }
    } // _onclose()
  }
</script>