<!--
File: u-markdown.sfc

The `<u-markdown>` component can be used to display Markdown formatted documents in the browser.

Copyright (c) 2025 by Matthias Hertel, http://www.mathertel.de
This work is licensed under a BSD-3-Clause license. See http://www.mathertel.de/License.aspx

See [u-markdown documentation](https://github.com/mathertel/sfc/blob/main/doc/u-markdown.md) on GitHub.
-->

<template>
  <div></div>
</template>

<style scoped>
:host {
  display: block;
  height: 100%;
}
code {
  background-color: antiquewhite;
}
</style>

<script>
export default class MyMarkdown extends UComponent {
  static get observedAttributes() {
    return ["textcontent", "src"];
  }
  srcLink = undefined;

  // text from markdown file or direct text
  srcText = undefined;
  // text from markdown file or direct text
  srcText = null;

  // Markdown renderer
  md = null;

  // counter for unloaded scripts
  _scriptsUnloaded = 0;

  importScript(src) {
    const base = new URL(loaderURL);
    const url = new URL(src, base);

    var scr = document.createElement('script');
    scr.addEventListener("load", (evt) => {
      console.log(this.tagName, `script ${src} loaded.`);
      this._scriptsUnloaded--;
      if (this._scriptsUnloaded == 0) this.init();
    });
    this._scriptsUnloaded++;
    scr.src = url.href;
    this.shadowRoot.appendChild(scr);
    console.log(this.tagName, `loading script ${src} from ${url.href}...`);
  }

  constructor() {
    super();
    this.importScript("/markdown-it.js");
    this.importScript("/markdown-it-attrs.js");
  }

  // fetch file content
  fetchMarkdown() {
    const oDiv = this.shadowRoot.querySelector('div');
    oDiv.textContent = '(process url...)';

    fetch(this.srcLink)
      .then(response => response.text())
      .then(text => {
        this.srcText = text;
        this.renderMarkdown();
      });
  }

  // render markdown
  renderMarkdown() {
    const oDiv = this.shadowRoot.querySelector('div');
    if (!this.md) {
      window.markdownItAttrs

      this.md = window.markdownit({
        html: true,
        linkify: true,
        typographer: true
      })
      .use (window.markdownItAttrs);
    }
    oDiv.innerHTML = this.md.render(this.srcText);
  }

  // process markdown
  process() {
    console.log(this.tagName, "process...");
    if (window.markdownit) {
      if (this.srcText) {
        this.renderMarkdown();
      } else if (this.srcLink) {
        this.fetchMarkdown();
      }
    }
  }

  // This init() will be called once by the loader and then when all scripts are loaded.
  // Then processing is required.
  init() {
    if (this._scriptsUnloaded == 0) this.process();
  } // init()


  attributeChangedCallback(name, oldValue, newValue) {
    if (newValue) {
      this.srcLink = this.srcText = undefined;
      if (name === 'src') {
        this.srcLink = newValue;

      } else if (name === 'textcontent') {
        this.srcText = newValue;
      }
      if (this._scriptsUnloaded == 0) this.process();
    }
  } // attributeChangedCallback()

}
</script>