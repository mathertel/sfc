<!--

File: u-time.sfc

Copyright (c) 2025 by Matthias Hertel, http://www.mathertel.de
This work is licensed under a BSD-3-Clause license. See http://www.mathertel.de/License.aspx

Implementation of a custom element that enriches the functionality of regular <time> elements to support locale specific
formatting of date & time values.

Documentation is available at <https://github.com/mathertel/sfc/blob/main/doc/u-time.md>

Example: <time is='u-time' datestyle='short' timestyle='short' datetime='31.01.2024'></time>

-->

<!-- <style></style> -->

<script extends="time">
  export default class MyTime extends HTMLTimeElement {
    static observedAttributes = ["datetime", "datestyle", "timestyle"];

    _value = '2020-01-01';
    _frm = undefined;
    _dateStyle = "medium";
    _timeStyle = "medium";

    constructor() {
      super();
      console.debug('constructor()');
      // create setters and getters for the observedAttributes.
      for (const a of this.constructor.observedAttributes) {
        Object.defineProperty(this, a, {
          set(x) { this.setAttribute(a, x); },
          get() { return this.getAttribute(a); }
        });
      }
    } // constructor()


    init() {
      console.debug('init()');
    } // init()


    // show the date and time as textContent in the defined style.
    showValue() {
      let date;

      if (this._value === '') {
        date = new Date();

      } else if (this._value.match(/^\d+$/)) {
        date = new Date(Number(this._value));

      } else {
        date = new Date(this._value);
      }

      const fmt = new Intl.DateTimeFormat(navigator.languages, {
        dateStyle: this._dateStyle,
        timeStyle: this._timeStyle,
      });
      this.textContent = fmt.format(date);
    } // showValue()


    attributeChangedCallback(name, oldValue, newValue) {
      console.debug("attributeChanged", name, oldValue, newValue);

      this.value = this.getAttribute('datetime');
      this._frm = this.getAttribute('frm');

      if (name === 'datetime') {
        this._value = newValue;

      } else if (name === 'datestyle') {
        this._dateStyle = newValue.length ? newValue : undefined;
        if ((this._dateStyle === 'none') || (this._dateStyle === 'null')) {
          this._dateStyle = undefined;
        }

      } else if (name === 'timestyle') {
        this._timeStyle = newValue.length ? newValue : undefined;
        if ((this._timeStyle === 'none') || (this._timeStyle === 'null')) {
          this._timeStyle = undefined;
        }

      }
      this.showValue();
    } // attributeChangedCallback()
  }
</script>