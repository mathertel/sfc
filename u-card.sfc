<!--

File: u-card.sfc

Implementation of a custom element that renders html to display cards with header, body and footer.

Copyright (c) 2025 by Matthias Hertel, http://www.mathertel.de
This work is licensed under a BSD-3-Clause license. See http://www.mathertel.de/License.aspx

Example: <u-card icon="button" title="Clickable"> ...  </u-card>

-->

<template light>
  <div class="header">
    <svg style="display:none">
      <use href="./icons.svg#no"></use>
    </svg>
    <h3></h3>
  </div>
  <div class="main">
    <slot></slot>
  </div>
  <div class="footer">
    <slot></slot>
  </div>
</template>

<style>
  u-card:hover {
    box-shadow: var(--dropshadow);
  }
</style>

<script>
  export default class UCard extends UComponent {
    static observedAttributes = ["title", "icon"];
    value = 'black';
    cssvar = '';

    constructor(p) {
      super();
      // UComponent has at this stage already copied the template to the shadow root 

      // move all nodes not from the template into right slot
      const childNodes = Array.from(this.childNodes);
      for (const n of childNodes) {
        if (n.nodeType === Node.TEXT_NODE && n.nodeValue.trim() === '') {
          n.remove(); // remove empty text nodes
        } else {
          if (n.classList?.contains('header')) break;
          // header is first element of template -> stop the loop
          const sl = this.querySelector((n.tagName === 'BUTTON') ? '.footer>slot' : '.main>slot');
          sl.appendChild(n);
        }
      }
    }

    onclick(evt) {
      console.debug("click", evt);
    }

    onchange(evt) {
      console.debug("change", evt);
    }

    init() {
      console.debug('init()');
      document.querySelector('u-card').classList.add('card');
      this.classList.add('card');
    } // init()

    attributeChangedCallback(name, oldValue, newValue) {
      console.debug("attributeChanged", name, oldValue, newValue);

      if (name === 'title') {
        this.querySelector('.header>h3').textContent = newValue;
      } else if (name === 'icon') {
        const svg = this.querySelector('.header>svg');
        svg.style.display = "";
        svg.firstElementChild.href.baseVal = "./icons.svg#" + newValue;
      }
    } // attributeChangedCallback()

    adoptedCallback() {
      console.debug("adopted", evt);
    }
  }
</script>