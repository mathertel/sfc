<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>data-hub Test Page</title>

  <link Content-Type="text/css" href="/docstyle.css" rel="stylesheet" />
  <style>
    xcode[is='u-code'] {
      box-shadow: 0 0 0.1rem 0.2rem lime;
    }

    #testResults {
      background-color: beige;

      >span {
        margin-right: 0.5em;
        cursor: pointer;
      }

      /* .ok {background-color: lime; border:1px solid black} */
      /* .error {background-color: lightcoral;} */

    }
  </style>
  <script src="/loader.js"></script>
  <!-- <script src="/data-hub.js" type="module"></script> -->
  <script>
    // var allSFCLoaded = window.loadComponent('u-code');
  </script>
</head>

<body class="sitelayout" style="--main-width: 60em">
  <header>
    <h1>data-hub Test Page</h1>
  </header>

  <main>
    <nav>
      <button id="set1">set1</button>
      <button id="set2">set2</button>
      <button id="getJson">json</button>
      <button id="hubReplay">replay</button>
      <button id="hubUnsubscribe">unsubscribe Age</button>
    </nav>

    <h3>Test Results</h3>
    <div id="testResults"></div>

    <hr />
    <hr />
    <div><label>person.name: <span id="personName">...</span></label></div>
    <div><label>person.age: <span id="personAge">...</span></label></div>

    <hr />
    <div><label for="rawview">Data</label></div>
    <pre><code id="rawview"></code></pre>

    <hr />
    <div><label for="logview">Log:</label></div>
    <pre id="logview"></pre>


  </main>

  <script type="module">
    import { DataHub } from '/data-hub.js';
    window.datahub.configurePersistence(sessionStorage, "datahub_store");

    const rawObj = document.querySelector('#rawview');
    const logObj = document.querySelector('#logview');
    const testsObj = document.querySelector('#testResults');

    const rawData1 = { person: { name: 'John Doe', age: 30, city: 'New York', hobby: 'reading' } };
    const rawData2 = { person: { name: 'Max Dose', age: 40, city: 'Boston', hobby: 'writing' } };
    let subAge;

    function rawCallback(path, value) {
      // debugger;
      if (typeof value === 'object') {
        logObj.textContent += `\n ${path}=${JSON.stringify(value)}`;
      } else {
        logObj.textContent += `\n { ${path}='${value}' }`;
      }
    }


    // registered tests
    let tests = [];

    // read data from path and compare by converting to JSON strings.
    function expectData(dh, path, expected) {
      const v = JSON.stringify(dh.get(path));
      expected = JSON.stringify(expected);
      if (v !== expected) {
        return (`Error: get('${path}') returned '${v}' expected '${expected}'`);
      } else {
        return (`Ok: get('${path}') returned '${v}'`);
      }
    } // expectData


    function expectCallbacks(dh, path, expected) {
      const log = [];

      if (!Array.isArray(expected)) expected = [expected];

      log.push(`subscribe('${path}')`);

      // add all expected values into the log
      for (const e of expected) {
        log.push(`Expect: '${JSON.stringify(e)}'`);
      }


      dh.subscribe(path, (p, v) => {
        v = JSON.stringify(v);

        // search for expected value
        const n = log.indexOf(`Expect: '${v}'`);

        if (n > 0) {
          // Test Case is ok. 
          log[n] = `Ok: '${p}'='${v}'`;

        } else {
          // Unexpected case is error
          log.push(`Error: returned unexpected '${p}'='${v}'`);
        }
      });
      return (log);
    } // expectCallback()


    function do_publish(dh, k, v) {
      dh.publish(k, v);
      return (`Publish('${JSON.stringify(k)}', ${JSON.stringify(v)})`);
    } // do_publish


    // add logging of the test case to the debug log
    // abd create a test-case UI.
    function do_report(log) {
      let hassError = false;
      // Flatten the log array
      log = log.flat(Infinity);

      // check for existing "Error:" in test log.
      let allPassed = true;
      for (let l of log) {
        if (l.startsWith("Error:") || l.startsWith("Expect:")) allPassed = false;
      }

      if (allPassed) {
        console.groupCollapsed('Passed: ' + log[0]);
      } else {
        console.group('Error: ' + log[0]);
      }

      for (let n = 1; n < log.length; n++) {
        const l = log[n];
        if (l.startsWith("Error:") || l.startsWith("Expect:")) {
          console.log(`%c${l}`, 'color: red;');
        } else {
          console.log(l);
        }
      }
      console.groupEnd();

      const tc = document.createElement('span');
      tc.className = allPassed ? "valid" : "error";
      tc.innerText = log[0];
      tc.title = log.join('\n');
      testsObj.appendChild(tc);
    } // summarize()


    function test00(dh) {
      dh.clear();
      const logs = ['Test 00']; // [string | []]

      // ...

      do_report(logs);
    } // test01


    function test01(dh) {
      dh.clear();
      const logs = ['Test 01 Basic']; // [string | []]

      logs.push(expectData(dh, "", {}));
      logs.push(expectCallbacks(dh, "", { "at": 1 }));
      logs.push(expectCallbacks(dh, "at", 1));
      // logs.push(expectCallbacks(dh, "[at]", 1));
      logs.push(expectCallbacks(dh, "/at", 1));
      logs.push(expectCallbacks(dh, ".at", 1));
      logs.push(expectCallbacks(dh, "*", [1, { "at": 1 }]));

      logs.push(do_publish(dh, "", { "at": 1 }));

      logs.push(expectData(dh, "at", 1));
      logs.push(expectData(dh, "", { "at": 1 }));
      do_report(logs);
    } // test01

    function test02(dh) {
      dh.clear();
      const logs = ['Test 02 Object']; // [string | []]

      logs.push(expectData(dh, "", {}));
      logs.push(expectCallbacks(dh, "", { "obj": { "a": 1 } }));
      logs.push(expectCallbacks(dh, "obj", { "a": 1 }));
      // logs.push(expectCallbacks(dh, "[obj]", 1));
      logs.push(expectCallbacks(dh, "obj/a", 1));
      logs.push(expectCallbacks(dh, ".a", 1));

      logs.push(do_publish(dh, "", { "obj": { "a": 1 } }));

      logs.push(expectData(dh, "obj", { "a": 1 }));
      logs.push(expectData(dh, "x", undefined));
      do_report(logs);
    } // test02

    // simple arrays
    function test03(dh) {
      dh.clear();
      const logs = ['Test 03 Arrays']; // [string | []]

      logs.push(expectData(dh, "", {}));
      logs.push(expectCallbacks(dh, "arr", [[0, 1, 2], [0, 1, 2, 33]]));
      logs.push(expectCallbacks(dh, "arr.*", [0, 1, 2, 33]));

      logs.push(do_publish(dh, "", { arr: [0, 1, 2] }));

      logs.push(expectCallbacks(dh, "arr.*", [33]));
      logs.push(do_publish(dh, "arr.3", 33));

      logs.push(expectData(dh, "a", undefined));
      logs.push(expectData(dh, "arr", [0, 1, 2, 33]));
      logs.push(expectData(dh, "arr.1", 1));
      logs.push(expectData(dh, "arr.*", undefined)); // no wildcards in data requests
      do_report(logs);
    } // test03


    // person cases
    function test04(dh) {
      dh.clear();
      const logs = ['Test 03 Person-A']; // [string | []]

      logs.push(do_publish(dh, "", { person: { name: 'John Doe', age: 30, city: 'New York', hobby: 'reading' } }));
      logs.push(expectData(dh, "person", { "name": "John Doe", "age": 30, "city": "New York", "hobby": "reading" }));
      logs.push(expectData(dh, "person.name", "John Doe"));
      debugger;
      logs.push(expectData(dh, "person[name]", "John Doe"));
      logs.push(expectData(dh, "person.age", 30));

      // const pk1 = pathKeys("person");
      // const pk2 = pathKeys("person.age");
      do_report(logs);
    } // test03


    function test99(dh) {
      dh.clear();
      const logs = ['Test 99']; // [string | []]

      // setup subscription with callback
      // dh.subscribe("**", rawCallback);
      dh.subscribe("", rawCallback);
      dh.subscribe("", (p, v) => { rawObj.textContent = JSON.stringify(v, null, 2); });

      dh.subscribe("person.name", (p, v) => { document.querySelector('#personName').textContent = v; });
      subAge = dh.subscribe("person.age", (p, v) => { document.querySelector('#personAge').textContent = v; });

      dh.publish("", { "a": 1 });
      dh.publish("", { "A": 0 });
      dh.publish("", { "a": 2 });
      dh.publish("", { "b": 2, "c": 40 });
      dh.publish("", { "b": undefined });
      dh.publish("", { "age": 42 });
      dh.publish("a", 3);

      dh.publish("", { "o": { "b": 4 } });
      dh.publish("", { "O": { "b": 5 } });
      dh.publish("", { "o": { "c": 50 } });
      dh.publish("o.c", 51);
      console.log(dh.get("o"));
      console.log(dh.get("o.c"));
      console.log(dh.get("o.none"));
      dh.publish("", { "p": {} });
      dh.publish("", { "o": { "c": "call-me" } });
      dh.publish("", { "o": { "c": undefined } });

      dh.publish("", { "l": [] });
      dh.publish("", { "l": ["tag1", "tag2"] });
      dh.publish("l.4", "tag4");

      const a = new Array(); a[7] = "tag7";
      dh.publish("", { "l": a });

      console.groupEnd();

    }


    function expectPath(path, expected) {
      const log = [];
      expected = JSON.stringify(expected);
      const p = DataHub.tokenizePath(path);
      const ps = JSON.stringify(p);

      if (ps === expected) {
        return (`Ok: Path "${path}" => ${ps}`);
      } else {
        return (`Error: Path "${path}" => ${ps} expected ${expected}`);
      }
    }

    function testP01() {
      const logs = ['Test Paths']; // [string | []]
      logs.push(expectPath("person", ["person"]));
      logs.push(expectPath(".person", ["person"]));
      logs.push(expectPath("/person", ["person"]));
      logs.push(expectPath("\\person", ["person"]));
      logs.push(expectPath("person.age", ["person", "age"]));
      logs.push(expectPath("person/age", ["person", "age"]));
      logs.push(expectPath("person\\age", ["person", "age"]));
      logs.push(expectPath("person\\age", ["person", "age"]));
      logs.push(expectPath("person.88", ["person", 88]));
      logs.push(expectPath("person[88]", ["person", 88]));
      logs.push(expectPath("person['age']", ["person", "age"]));
      do_report(logs);
    }


    window.addEventListener('DOMContentLoaded', function () {
      // debugger;

      testP01();

      // test00(window.datahub);
      // test01(window.datahub);
      // test02(window.datahub);
      // test03(window.datahub);
      // test04(window.datahub);
      // test99(window.datahub);


    });


    document.querySelector('#set1').addEventListener('click', function () {
      window.datahub.publish("", rawData1);
    });

    document.querySelector('#set2').addEventListener('click', function () {
      window.datahub.publish("", rawData2);
    });

    document.querySelector('#getJson').addEventListener('click', function () {
      let d1 = window.datahub.get('a');
      d1 = window.datahub.get('a[0]');
      d1 = window.datahub.get('a[1]');
      d1 = window.datahub.get('a[0].b');
      d1 = window.datahub.get('a[0]["b"]');
      d1 = window.datahub.get('a[0].b');
      const ds = window.datahub.get('person');
      rawObj.textContent = JSON.stringify(ds, null, 2);
    });

    document.querySelector('#hubReplay').addEventListener('click', function () {
      window.datahub.replay("");
    });

    document.querySelector('#hubUnsubscribe').addEventListener('click', function () {
      window.datahub.unsubscribe(subAge);
    });

  </script>
</body>

</html>